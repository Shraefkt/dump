import math
import numpy as np
import matplotlib.pyplot as plt
from n_cover import calc_n_cover
def overhead(a,b,n_nodes,n_cover,debug=True): #n_node -> leaf nodes
    if a == b:
        return 0
    depth = math.ceil(math.log(n_nodes, 2)) + 1
    actual_a = 2 ** (depth - 1) + a - 1
    actual_b = 2 ** (depth - 1) + b - 1
    actual_n_nodes = 2 ** (depth - 1) + n_nodes - 1
    nodes = calc_n_cover(actual_a, actual_b, n_cover)
    x_node_min = depth - math.floor(math.log(nodes[0], 2)) - 1  # depth to leaf layer/ height
    x_node_max = depth - math.floor(math.log(nodes[-1], 2)) - 1 # depth to leaf layer
    min = nodes[0]*(2**(x_node_min))
    max = (nodes[-1]+1)*(2**x_node_max) - 1
    if max > actual_n_nodes:
        max = actual_n_nodes
    overhead_number = max-actual_b+actual_a-min
    overhead_percentage = overhead_number/(actual_b-actual_a)
    if debug:
        print(f"Actual a:{actual_a}, Actual b:{actual_b}")
        print(f"Nodes: {nodes}")
        print(f"depth: {depth}, x_min: {x_node_min}, x_max :{x_node_max}")
        print(f"Min descendant:{min}, max descendant: {max}")
        print(f"Overhead: {overhead_number}")
        print(f"Percentage: {overhead_percentage}")
    return overhead_percentage
def get_average_overhead(n_nodes,n_cover):
    counter = 0
    overhead_total = 0
    for b in range(1,n_nodes+1):
        for a in range(1,b):
            over = overhead(a, b, n_nodes, n_cover, debug=False)
            overhead_total += over
            counter += 1
    return overhead_total/counter
def plot(n_cover,n_times):
    Number_of_nodes_array = []
    Ave_overhead_array = []
    for i in range(2, n_times):
        Number_of_nodes_array.append(i)
        Ave_overhead_array.append(get_average_overhead(i, n_cover) * 100)
    Number_of_nodes_array = np.array(Number_of_nodes_array)
    Ave_overhead_array = np.array(Ave_overhead_array)
    plt.plot(Number_of_nodes_array, Ave_overhead_array, label=f"{int(n_cover)}-cover")

plt.xlabel("Number of nodes")
plt.ylabel("Average overhead percentage")
times = 100
plot(1,times)
plot(2,times)
plot(3,times)
plot(4,times)
plot(5,times)

leg = plt.legend(loc='upper center')
plt.show()
