import numpy as np
from utils import *
from bruteforcer import get_height_profile
import re

def our_formula(n_nodes:int,n_cover):
    if n_nodes <= 8:
        universal_cover = get_height_profile(n_nodes, get_depth(n_nodes)+1,n_cover, debug=False)
        return universal_cover
    if n_nodes%2 == 0:
        n_nodes = n_nodes +1
    n_nodes = list(bin(n_nodes))
    n_nodes.pop(0)
    n_nodes.pop(0)
    n_nodes = ''.join(str(i) for i in n_nodes)
    position_one = [m.start() for m in re.finditer('1',n_nodes)]
    position_zero = [m.start() for m in re.finditer('0',n_nodes)]
    position_one = [len(n_nodes)-i-1 for i in position_one]
    position_zero = [len(n_nodes)-i-1 for i in position_zero]
    if len(position_one) > n_cover:
        for i in range(len(position_one)-n_cover):
            replacement = position_one[-2] +1
            position_one.pop()
            position_one.pop()
            position_one.append(replacement)
    if len(position_one) < n_cover:
        for i in range(n_cover-len(position_one)):
            duplicated = position_one[0] -1
            position_one.pop(0)
            position_one = [duplicated] + [duplicated] + position_one
    position_zero = [x for x in position_zero if x not in position_one]
    universal_cover = zero_chain(position_zero,position_one)
    return universal_cover

def zero_chain(position_zero,position_one):
    for i in range(len(position_one)):
        if position_one[i] +1 in position_zero:
            position_one[i] = position_one[i] +1
            position_zero.pop(position_zero.index(position_one[i]))
            return zero_chain(position_zero,position_one)
    return position_one
