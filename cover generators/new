from utils import *
from collections import Counter
import numpy as np
from operator import countOf
import pprint
T = {}

def get_1_cover(a, b, debug=False):
    shift_length = len("{:b}".format(a ^ b)) if a != b else 0
    node = a >> shift_length
    if debug:
        print(f"Node: {node}")
        print(f"a: {a}, b: {b}")
    return node

def initialize(d):
    for a in range(2**(d-1),2**d):
        for b in range(a,2**d):
            overcover_nodes = [get_1_cover(a,b)]
            if get_max_descendant(overcover_nodes[0],(2**d)-1) == b:
                e = get_number_overhead_nodes(a,b,(2**d)-1,overcover_nodes)
                T[(a,b,1,e)] = [overcover_nodes]
def BuildTable(c,d):
    c_minus_1_entries = [key for key in T.keys() if key[2] == c-1]
    for entry in c_minus_1_entries:
        a,b,e = entry[0],entry[1],entry[3]
        total_nodes = 2 ** d-1
        x = b + 1
        for value in T[entry]:
            for n in range(d):
                y = b + 2 ** n
                if y <= (2 ** d) - 1 and x % (2 ** n) == 0:
                    new_node = int(x / (2 ** n))
                    overcover = value + [new_node]
                    left_bound = get_min_descendant(overcover[0],total_nodes)
                    for a_p in range(left_bound,y+1):
                        e = int(get_number_overhead_nodes(a_p,y,total_nodes,overcover,debug=False))
                        if (a_p, y, c, e) in T:
                            #do the dip case later
                            if value + [new_node] not in T[a_p, y, c, e]:
                                #breakpoint()
                                T[a_p, y, c, e].append(value + [new_node])
                                continue
                            continue
                        T[a_p, y, c, e] = [value + [new_node]]

# note to self : destroy 11, 24, 25, 23 cases
# bound e
def helper(r,c,d,e):
    universal_cover = []
    T_universal = {}
    for a in range(2 ** (d - 1), 2 ** d - r + 1):
        b = a + r - 1
        for e1 in range(e + 1):
            # print('e1',e1)
            e2 = e - e1
            # print('e2', e2)
            b_extended = b + e2
            if b_extended <= 2 ** d - 1: # b_extended stays in that layer of the tree
                for x in range(a, b_extended):
                    if (a, x, c - 1, e1) in T:
                        for front_part in T[a, x, c - 1, e1]:
                            one_cov_part = [get_1_cover(x + 1, b_extended)]
                            max_descendent = get_max_descendant(one_cov_part[0], 2 ** d - 1)
                            min_descendent = get_min_descendant(one_cov_part[0], 2 ** d - 1)
                            # print('a:', a, 'x:', x, 'b:', b, front_part, one_cov_part, max_descendent)
                            if max_descendent == b_extended and min_descendent == x + 1:
                                cover = front_part + one_cov_part
                                cover = sorted([get_height(n, 2 ** d - 1) for n in cover],reverse=True)
                                if (a, b) in T_universal:
                                    if cover not in T_universal[a,b]:
                                        T_universal[(a, b)].append(cover)
                                else:
                                    T_universal[(a, b)] = [cover]
        if (a, b) not in T_universal:
            # print('wtf__________')
            e = e + 1
            return helper(r,c,d,e)
    print(T_universal)
    black_magic = [tuple(stuff) for value in T_universal.values() for stuff in value]
    counted_items = Counter(black_magic)
    universal_cover = counted_items.most_common()[0][0]
    universal_cover_len = counted_items.most_common()[0][1]
    correct_len = 2 ** d - 2 ** (d-1) - r + 1
    if correct_len == universal_cover_len:
        return universal_cover
    print("Big problem, oops")
    breakpoint()
def Universal(r,c):
    d = math.ceil(math.log(r,2))+2
    initialize(d)
    if c != 2:
        for i in range(2,c):
            BuildTable(i,d)
    e = 0
    universal_cover = helper(r,c,d,e)
    return universal_cover


print(Universal(54,4))
